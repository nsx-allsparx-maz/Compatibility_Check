

openapi: 3.0.1
info:
  title: Sample
  description: This is  store.
  termsOfService: https://e/terms/
  contact:
    name: API
    url: https://www.example.com/
    email: support@ex.com
  license:
    name: MIT
    url: https://wws/LICENSE-2.0.html
  version: 1.0.6
paths:
  /users:
    post:
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: offContent
          content:
            application/json:
              schema:
                type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            new_parameter:
              value:
                id: 2
      requestBody:
        content:
          application/json:
            schema:
              properties:
                toModify:
                  type: array
                name:
                  type: string
                fakeProperty:
                  type: boolean
                requiredProperty:
                  type: string
              required:
                - requiredProperty
              additionalProperties:
                additional:
                  type: array
              items:
                description: This is item that is to be deleted
              enum: [asc,desc]
              oneOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
              discriminator:
                propertyName: pet_type
              type: object
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                required:
                  - id
                type: object
          headers:
            X-RateLimit-Modified:
              schema:
                type: boolean
              description: The time window.
              examples:
                Jessica: # Example 1
                  value:
                    id: 10
                    name: Jessica Smith
                Ron: # Example 2
                  value:
                    id: 11
                    name: Ron Stewart
            X-RateLimit-Modified2:
              schema:
                type: boolean
              description: The time window.
              examples:
                Jessica: # Example 1
                  value:
                    id: 10
                    name: Jessica Smith
                Ron: # Example 2
                  value:
                    id: 11
                    name: Ron Stewart
            X-RateLimit-Modified3:
              schema:
                type: boolean
              description: The time window.
            X-Rate-FAKEHeader-Deleted:
              schema:
                type: integer
            X-RateLimit-ModifiedExamples:
              schema:
                type: boolean
              description: The time window.
              examples:
                Incomplete Task:
                  value:
                    id: 1
                    name: get food
                    completed: false
                Complete Task:
                  value:
                    id: 2
                    name: get cider
                    completed: true
                    completed_at: 2020-08-23T13:22:52.685Z
  /users/{userId}:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
                required:
                  - name
                type: object
  /addUsers:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
  /deletedUsers:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
                required:
                  - name
                type: object
security:
  - user_auth:
      - write:users
      - read:pets
  - customer_auth:
      - write:customer
      - read:customer
servers:
  - url: https://staging.gigantic-server.com/v1
    description: Staging server
  - url: https://api.gigantic-server.com/v1
    description: Production server
    variables:
      customerId:
        default: demo
        description: Customer ID assigned by the service provider
      port:
        enum:
          - '443'
          - '8443'
        default: '443'
tags:
  - name: users
    description: User operations
  - name: customer
    description: Customer operations
externalDocs:
  description: Find more info here
  url: https://vdcghvhe.com
components:
  schemas:
    Pet:
      type: object
      required:
        - pet_type
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
    Dog:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            bark:
              type: boolean
            breed:
              type: string
              enum: [Dingo, Husky, Retriever, Shepherd]
    Cat:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            hunts:
              type: boolean
            age:
              type: integer
